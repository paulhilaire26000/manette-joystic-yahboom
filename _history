{"entries":[{"timestamp":1760895728911,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":1188,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"serial_redirect_to_usb\" disabled-reasons=\"pxt_automatic_disabled\" x=\"259\" y=\"-34\"><next><block type=\"serial_writevalue\" disabled-reasons=\"pxt_automatic_disabled\"><value name=\"name\"><shadow type=\"text\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"TEXT\">x</field></shadow></value><value name=\"value\"><block type=\"manette_get_axis_value\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"ax\">Gamepadaxis.x</field></block></value><next><block type=\"serial_writevalue\" disabled-reasons=\"pxt_automatic_disabled\"><value name=\"name\"><shadow type=\"text\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"TEXT\">y</field></shadow></value><value name=\"value\"><block type=\"manette_get_axis_value\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"ax\">Gamepadaxis.y</field></block></value><next><block type=\"device_pause\" disabled-reasons=\"pxt_automatic_disabled\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"ms\">100</field></shadow></value></block></next></block></next></block></next></block><block type=\"device_forever\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"device_show_leds\"><field name=\"LEDS\">`\n        . . . . . \n        . . . . . \n        . . . . . \n        . . . . . \n        . . . . .\n        `</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">100</field></shadow></value></block></next></block></statement></block><block type=\"manette_on_button_pressed\" x=\"365\" y=\"263\"><field name=\"btn\">GamepadButton.B1</field><statement name=\"HANDLER\"><block type=\"basic_show_icon\"><field name=\"i\">IconNames.Heart</field></block></statement></block><block type=\"device_button_event\" x=\"-4\" y=\"434\"><field name=\"NAME\">Button.A</field></block><block type=\"manette_on_joystic_button_pressed\" x=\"363\" y=\"480\"><statement name=\"HANDLER\"><block type=\"basic_show_icon\"><field name=\"i\">IconNames.Yes</field></block></statement></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":135,"diffs":[[1,"input.onButtonPressed(Button.A, function () {\n\t\n"]]},{"start1":109,"length1":0,"diffs":[[1,"    basic.showIcon(IconNames.Heart)\n})\nmanette.on_joystic_button_pressed(function () {\n"]]},{"start1":230,"length1":43,"diffs":[[1,""]]},{"start1":233,"length1":0,"diffs":[[1,"basic.forever(function () {\n    basic.showLeds(`\n        . . . . .\n        . . . . .\n        . . . . .\n        . . . . .\n        . . . . .\n        `)\n    basic.pause(100)\n})\n"]]}]}]},{"timestamp":1760895801857,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":1183,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"manette_on_button_pressed\" x=\"169\" y=\"255\"><field name=\"btn\">GamepadButton.B1</field><statement name=\"HANDLER\"><block type=\"basic_show_icon\"><field name=\"i\">IconNames.Yes</field><next><block type=\"device_set_digital_pin\"><value name=\"name\"><shadow type=\"digital_pin_shadow\"><field name=\"pin\">DigitalPin.P0</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\"><mutation min=\"0\" max=\"1\" label=\"Value\" precision=\"0\"></mutation><field name=\"SLIDER\">1</field></shadow></value></block></next></block></statement></block><block type=\"manette_on_button_pressed\" x=\"184\" y=\"501\"><field name=\"btn\">GamepadButton.B2</field><statement name=\"HANDLER\"><block type=\"basic_show_icon\"><field name=\"i\">IconNames.Yes</field><next><block type=\"device_set_digital_pin\"><value name=\"name\"><shadow type=\"digital_pin_shadow\"><field name=\"pin\">DigitalPin.P0</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\"><mutation min=\"0\" max=\"1\" label=\"Value\" precision=\"0\"></mutation><field name=\"SLIDER\">0</field></shadow></value></block></next></block></statement></block></xml>"]]}]},{"type":"edited","filename":"manette_yahboom_joystic.ts","patch":[{"start1":353,"length1":82,"diffs":[[1,""]]},{"start1":3375,"length1":350,"diffs":[[1,""]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":530,"length1":31,"diffs":[[1,"    \"preferredEditor\": \"blocksprj\"\n"]]}]}]},{"timestamp":1760941499077,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":1188,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"manette_on_button_pressed\" x=\"0\" y=\"0\"><field name=\"btn\">GamepadButton.B1</field><statement name=\"HANDLER\"><block type=\"basic_show_icon\"><field name=\"i\">IconNames.Yes</field><next><block type=\"device_set_digital_pin\"><value name=\"name\"><shadow type=\"digital_pin_shadow\"><field name=\"pin\">DigitalPin.P0</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\"><mutation min=\"0\" max=\"1\" label=\"Value\" precision=\"0\"></mutation><field name=\"SLIDER\">1</field></shadow></value></block></next></block></statement></block><block type=\"manette_on_button_pressed\" x=\"15\" y=\"246\"><field name=\"btn\">GamepadButton.B2</field><statement name=\"HANDLER\"><block type=\"basic_show_icon\"><field name=\"i\">IconNames.Yes</field><next><block type=\"device_set_digital_pin\"><value name=\"name\"><shadow type=\"digital_pin_shadow\"><field name=\"pin\">DigitalPin.P0</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\"><mutation min=\"0\" max=\"1\" label=\"Value\" precision=\"0\"></mutation><field name=\"SLIDER\">0</field></shadow></value></block></next></block></statement></block></xml>"]]}]}]},{"timestamp":1760987705149,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":530,"length1":35,"diffs":[[1,"    \"preferredEditor\": \"tsprj\"\n"]]}]}]},{"timestamp":1760987705264,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":1032,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"manette_on_button_pressed\" x=\"169\" y=\"255\"><field name=\"btn\">GamepadButton.B1</field><statement name=\"HANDLER\"><block type=\"basic_show_icon\"><field name=\"i\">IconNames.Yes</field><next><block type=\"device_set_digital_pin\"><value name=\"name\"><shadow type=\"digital_pin_shadow\"><field name=\"pin\">DigitalPin.P0</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\"><mutation min=\"0\" max=\"1\" label=\"Value\" precision=\"0\"></mutation><field name=\"SLIDER\">1</field></shadow></value></block></next></block></statement></block><block type=\"manette_on_button_pressed\" x=\"184\" y=\"501\"><field name=\"btn\">GamepadButton.B2</field><statement name=\"HANDLER\"><block type=\"basic_show_icon\"><field name=\"i\">IconNames.Yes</field><next><block type=\"device_set_digital_pin\"><value name=\"name\"><shadow type=\"digital_pin_shadow\"><field name=\"pin\">DigitalPin.P0</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\"><mutation min=\"0\" max=\"1\" label=\"Value\" precision=\"0\"></mutation><field name=\"SLIDER\">0</field></shadow></value></block></next></block></statement></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":174,"diffs":[[1,"manette.on_button_pressed(GamepadButton.B2, function () {\n    basic.showIcon(IconNames.Yes)\n    pins.digitalWritePin(DigitalPin.P0, 0)\n"]]},{"start1":138,"length1":175,"diffs":[[1,"manette.on_button_pressed(GamepadButton.B1, function () {\n    basic.showIcon(IconNames.Yes)\n    pins.digitalWritePin(DigitalPin.P0, 1)\n"]]}]},{"type":"edited","filename":"manette_yahboom_joystic.ts","patch":[{"start1":3498,"length1":164,"diffs":[[1,"    //% block= \"mettre vibration de la manette Ã  $vbt\"\n    export function vibrate_the_gampad (vbt: Gamepadvibration):void{\n       if (vbt=Gamepadvibration.on) \n"]]},{"start1":3710,"length1":41,"diffs":[[1,"        if (vbt = Gamepadvibration.off)\n"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":530,"length1":31,"diffs":[[1,"    \"preferredEditor\": \"blocksprj\"\n"]]}]}]},{"timestamp":1760988289583,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"manette_yahboom_joystic.ts","patch":[{"start1":281,"length1":253,"diffs":[[1,""]]},{"start1":3811,"length1":312,"diffs":[[1,""]]}]}]},{"timestamp":1760988873484,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"manette_yahboom_joystic.ts","patch":[{"start1":281,"length1":123,"diffs":[[1,"enum vibrate_the_gamepad_time {\n    //% block=\"short_vibrate_the_gamepad\"\n    short_vibrate_the_gamepad,\n    //% block=\"medium_vibrate_the_gamepad\"\n    medium_vibrate_the_gamepad,\n    //% block=\"long_vibrate_the_gamepad\"\n    long_vibrate_the_gamepad,\n"]]},{"start1":4105,"length1":705,"diffs":[[1,"    //% block=\"mettre vibration pendant\"\n    export function vibrate_the_gamepad_time(vibrate_the_gamepad_time:vbtt): void {\n        manette.vibrate_the_gamepad(Gamepadvibration.on)\n        basic.pause(100)\n        manette.vibrate_the_gamepad(Gamepadvibration.off)\n"]]}]}]},{"timestamp":1760989439293,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":1195,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_button_event\" x=\"589\" y=\"39\"><field name=\"NAME\">Button.A</field><statement name=\"HANDLER\"><block type=\"manette_vibrate_the_gamepad\"><field name=\"vbt\">Gamepadvibration.on</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">100</field></shadow></value><next><block type=\"manette_vibrate_the_gamepad\"><field name=\"vbt\">Gamepadvibration.off</field></block></next></block></next></block></statement></block><block type=\"device_button_event\" x=\"593\" y=\"269\"><field name=\"NAME\">Button.B</field><statement name=\"HANDLER\"><block type=\"manette_vibrate_the_gamepad\"><field name=\"vbt\">Gamepadvibration.on</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"manette_vibrate_the_gamepad\"><field name=\"vbt\">Gamepadvibration.off</field></block></next></block></next></block></statement></block></xml>"]]}]},{"type":"edited","filename":"manette_yahboom_joystic.ts","patch":[{"start1":309,"length1":33,"diffs":[[1,"    //% block=\"cour\"\n    cour,\n"]]},{"start1":406,"length1":0,"diffs":[[1,"\n"]]},{"start1":4024,"length1":130,"diffs":[[1,"    export function vibrate_the_gamepad_time(Gamepadvibrationtime:vbtt): void {\n        if (Gamepadvibrationtime==cour)\n"]]},{"start1":4296,"length1":60,"diffs":[[1,"        if (Gamepadvibrationtime==moyen)\n"]]},{"start1":4489,"length1":59,"diffs":[[1,"        if (Gamepadvibrationtime==long)\n"]]},{"start1":4682,"length1":19,"diffs":[[1,"    }\n}\n"]]}]}]},{"timestamp":1760990032463,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":1194,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_button_event\" x=\"38\" y=\"56\"><field name=\"NAME\">Button.A</field><statement name=\"HANDLER\"><block type=\"manette_vibrate_the_gamepad\"><field name=\"vbt\">Gamepadvibration.on</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">100</field></shadow></value><next><block type=\"manette_vibrate_the_gamepad\"><field name=\"vbt\">Gamepadvibration.off</field></block></next></block></next></block></statement></block><block type=\"device_button_event\" x=\"4\" y=\"230\"><field name=\"NAME\">Button.B</field><statement name=\"HANDLER\"><block type=\"manette_vibrate_the_gamepad\"><field name=\"vbt\">Gamepadvibration.on</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"manette_vibrate_the_gamepad\"><field name=\"vbt\">Gamepadvibration.off</field></block></next></block></next></block></statement></block><block type=\"manette_vibrate_the_gamepad_time\" disabled-reasons=\"pxt_automatic_disabled\" x=\"515\" y=\"265\"><field name=\"vbtt\">Gamepadvibrationtime.moyen</field></block></xml>"]]}]},{"type":"edited","filename":"manette_yahboom_joystic.ts","patch":[{"start1":3978,"length1":56,"diffs":[[1,"    //% block=\"mettre vibration pendant $vbtt\"\n"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":530,"length1":35,"diffs":[[1,"    \"preferredEditor\": \"tsprj\"\n"]]}]}]},{"timestamp":1760990062742,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":352,"length1":64,"diffs":[[1,""]]}]}]},{"timestamp":1761040347042,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":1149,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_button_event\" x=\"41\" y=\"54\"><field name=\"NAME\">Button.A</field><statement name=\"HANDLER\"><block type=\"manette_vibrate_the_gamepad\"><field name=\"vbt\">Gamepadvibration.on</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">100</field></shadow></value><next><block type=\"manette_vibrate_the_gamepad\"><field name=\"vbt\">Gamepadvibration.off</field></block></next></block></next></block></statement></block><block type=\"manette_vibrate_the_gamepad_time\" disabled-reasons=\"pxt_automatic_disabled\" x=\"539\" y=\"134\"><field name=\"vbtt\">Gamepadvibrationtime.long</field></block><block type=\"device_button_event\" x=\"4\" y=\"230\"><field name=\"NAME\">Button.B</field><statement name=\"HANDLER\"><block type=\"manette_vibrate_the_gamepad\"><field name=\"vbt\">Gamepadvibration.on</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"manette_vibrate_the_gamepad\"><field name=\"vbt\">Gamepadvibration.off</field></block></next></block></next></block></statement></block></xml>"]]}]}]},{"timestamp":1761040347053,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":530,"length1":31,"diffs":[[1,"    \"preferredEditor\": \"blocksprj\"\n"]]}]}]},{"timestamp":1761043780676,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":1435,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_button_event\" x=\"41\" y=\"54\"><field name=\"NAME\">Button.A</field><statement name=\"HANDLER\"><block type=\"manette_vibrate_the_gamepad\"><field name=\"vbt\">Gamepadvibration.on</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">100</field></shadow></value><next><block type=\"manette_vibrate_the_gamepad\"><field name=\"vbt\">Gamepadvibration.off</field></block></next></block></next></block></statement></block><block type=\"device_button_event\" x=\"4\" y=\"230\"><field name=\"NAME\">Button.B</field><statement name=\"HANDLER\"><block type=\"manette_vibrate_the_gamepad\"><field name=\"vbt\">Gamepadvibration.on</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"manette_vibrate_the_gamepad\"><field name=\"vbt\">Gamepadvibration.off</field><next><block type=\"manette_vibrate_the_gamepad_time\"><field name=\"vbtt\">Gamepadvibrationtime.long</field></block></next></block></next></block></next></block></statement></block></xml>"]]}]}]},{"timestamp":1761043892013,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":276,"length1":44,"diffs":[[1,""]]}]},{"type":"added","filename":"test.ts","value":"// les tests vont ici ; cela ne sera pas compilÃ© si ce paquet est utilisÃ© en tant qu'extension.\n"}]}],"snapshots":[{"timestamp":1760895728910,"editorVersion":"8.0.17","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"serial_redirect_to_usb\" disabled-reasons=\"pxt_automatic_disabled\" x=\"259\" y=\"-34\"><next><block type=\"serial_writevalue\" disabled-reasons=\"pxt_automatic_disabled\"><value name=\"name\"><shadow type=\"text\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"TEXT\">x</field></shadow></value><value name=\"value\"><block type=\"manette_get_axis_value\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"ax\">Gamepadaxis.x</field></block></value><next><block type=\"serial_writevalue\" disabled-reasons=\"pxt_automatic_disabled\"><value name=\"name\"><shadow type=\"text\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"TEXT\">y</field></shadow></value><value name=\"value\"><block type=\"manette_get_axis_value\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"ax\">Gamepadaxis.y</field></block></value><next><block type=\"device_pause\" disabled-reasons=\"pxt_automatic_disabled\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"ms\">100</field></shadow></value></block></next></block></next></block></next></block><block type=\"device_forever\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"device_show_leds\"><field name=\"LEDS\">`\n        . . . . . \n        . . . . . \n        . . . . . \n        . . . . . \n        . . . . .\n        `</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">100</field></shadow></value></block></next></block></statement></block><block type=\"manette_on_button_pressed\" x=\"365\" y=\"263\"><field name=\"btn\">GamepadButton.B1</field><statement name=\"HANDLER\"><block type=\"basic_show_icon\"><field name=\"i\">IconNames.Heart</field></block></statement></block><block type=\"device_button_event\" x=\"-4\" y=\"434\"><field name=\"NAME\">Button.A</field></block><block type=\"manette_on_joystic_button_pressed\" x=\"363\" y=\"480\"><statement name=\"HANDLER\"><block type=\"basic_show_icon\"><field name=\"i\">IconNames.Yes</field></block></statement></block></xml>","main.ts":"","README.md":"","manette_yahboom_joystic.ts":"\n/**\n* Utilisez ce fichier pour dÃ©finir des fonctions et des blocs personnalisÃ©s.\n* En savoir plus Ã  https://makecode.microbit.org/blocks/custom\n*/   \nenum GamepadButton {\n    //% block=\"B1\"\n    B1,\n    //% block=\"B2\"\n    B2,\n    //% block=\"B3\"\n    B3,\n    //% block=\"B4\"\n    B4\n}\n\nenum Gamepadaxis {\n    //% block=\"x\"\n    x,\n    //% block=\"y\"\n    y,\n}\n\n/**\n * Custom blocks\n */\n//% weight=105 color=#821071 icon=\"\\uf11b\"\nnamespace manette {\n\n    /**\n     * Est pressÃ©\n     * @param btn Bouton de la manette\n     */\n    //% block=\"bouton $btn est pressÃ©\"\n    export function is_pressed(btn: GamepadButton):boolean {\n        if (btn == GamepadButton.B1) {\n            pins.setPull(DigitalPin.P13, PinPullMode.PullUp)\n            if (pins.digitalReadPin(DigitalPin.P13) == 0)\n                return true;\n            else\n                return false;\n        }\n        if (btn == GamepadButton.B2) {\n            pins.setPull(DigitalPin.P14, PinPullMode.PullUp)\n            if (pins.digitalReadPin(DigitalPin.P14) == 0)\n                return true;\n            else\n                return false;\n        } \n        if (btn == GamepadButton.B3) {\n            pins.setPull(DigitalPin.P15, PinPullMode.PullUp)\n            if (pins.digitalReadPin(DigitalPin.P15) == 0)\n                return true;\n            else\n                return false;\n        } \n        if (btn == GamepadButton.B4) {\n            pins.setPull(DigitalPin.P16, PinPullMode.PullUp)\n            if (pins.digitalReadPin(DigitalPin.P16) == 0)\n                return true;\n            else\n                return false;\n        }\n        return false;\n    }\n    /**\n        * Joystic est pressÃ©\n        */\n    //% block=\"bouton joystic est pressÃ©\"\n    export function joystic_is_pressed(): boolean {\n        pins.setPull(DigitalPin.P8, PinPullMode.PullUp)\n        if (pins.digitalReadPin(DigitalPin.P8) == 0)\n            return true;\n        else\n            return false;\n    }\n    /**\n     * Joystic\n     */\n    //% block=\"position de l'ax $ax du joystic\"\n    export function get_axis_value(ax :Gamepadaxis) : number {\n        let value = 0;\n        if (ax == Gamepadaxis.y)\n            value = pins.analogReadPin(AnalogReadWritePin.P1)\n        if (ax == Gamepadaxis.x)\n            value = pins.analogReadPin(AnalogReadWritePin.P2)\n        return (((value-512)*100)/512)*-1;\n    }\n\n    /**\n     * On button pressed\n     * @param btn Bouton de la manette\n     */\n    //% block=\"Lorsque $btn est pressÃ©\"\n    export function on_button_pressed(btn: GamepadButton, handler: () => void) {\n        control.inBackground(function() {\n            let prev = is_pressed(btn);\n            while (true) {\n                let val = is_pressed(btn);\n                if (!val && prev) {\n                    handler();\n                }\n                prev = val;\n                pause(20);\n            }\n        })\n    }\n\n    /**\n     * On joystic button pressed\n     */\n    //% block=\"Lorsque bouton joystic est pressÃ©\"\n    export function on_joystic_button_pressed(handler: () => void) {\n        control.inBackground(function () {\n            let prev = joystic_is_pressed();\n            while (true) {\n                let val = joystic_is_pressed();\n                if (!val && prev) {\n                    handler();\n                }\n                prev = val;\n                pause(20);\n            }\n        })\n    }\n}\n","pxt.json":"{\n    \"name\": \"manette joystic\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"manette_yahboom_joystic.ts\"\n    ],\n    \"targetVersions\": {\n        \"branch\": \"stable8.0\",\n        \"tag\": \"v8.0.17\",\n        \"commits\": \"https://github.com/microsoft/pxt-microbit/commits/9be832107a808812b98a75c4cd82bd7ff577193b\",\n        \"target\": \"8.0.17\",\n        \"pxt\": \"12.0.16\"\n    },\n    \"preferredEditor\": \"blocksprj\"\n}\n"}},{"timestamp":1760941367832,"editorVersion":"8.0.17","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"manette_on_button_pressed\" x=\"169\" y=\"255\"><field name=\"btn\">GamepadButton.B1</field><statement name=\"HANDLER\"><block type=\"basic_show_icon\"><field name=\"i\">IconNames.Yes</field><next><block type=\"device_set_digital_pin\"><value name=\"name\"><shadow type=\"digital_pin_shadow\"><field name=\"pin\">DigitalPin.P0</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\"><mutation min=\"0\" max=\"1\" label=\"Value\" precision=\"0\"></mutation><field name=\"SLIDER\">1</field></shadow></value></block></next></block></statement></block><block type=\"manette_on_button_pressed\" x=\"184\" y=\"501\"><field name=\"btn\">GamepadButton.B2</field><statement name=\"HANDLER\"><block type=\"basic_show_icon\"><field name=\"i\">IconNames.Yes</field><next><block type=\"device_set_digital_pin\"><value name=\"name\"><shadow type=\"digital_pin_shadow\"><field name=\"pin\">DigitalPin.P0</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\"><mutation min=\"0\" max=\"1\" label=\"Value\" precision=\"0\"></mutation><field name=\"SLIDER\">0</field></shadow></value></block></next></block></statement></block></xml>","main.ts":"","README.md":"","manette_yahboom_joystic.ts":"\n/**\n* Utilisez ce fichier pour dÃ©finir des fonctions et des blocs personnalisÃ©s.\n* En savoir plus Ã  https://makecode.microbit.org/blocks/custom\n*/   \nenum GamepadButton {\n    //% block=\"B1\"\n    B1,\n    //% block=\"B2\"\n    B2,\n    //% block=\"B3\"\n    B3,\n    //% block=\"B4\"\n    B4\n}\n\nenum Gamepadaxis {\n    //% block=\"x\"\n    x,\n    //% block=\"y\"\n    y,\n}\nenum Gamepadvibration {\n    //% block=\"on\"\n    on,\n    //% block=\"off\"\n    off,\n}\n\n/**\n * Custom blocks\n */\n//% weight=105 color=#821071 icon=\"\\uf11b\"\nnamespace manette {\n\n    /**\n     * Est pressÃ©\n     * @param btn Bouton de la manette\n     */\n    //% block=\"bouton $btn est pressÃ©\"\n    export function is_pressed(btn: GamepadButton):boolean {\n        if (btn == GamepadButton.B1) {\n            pins.setPull(DigitalPin.P13, PinPullMode.PullUp)\n            if (pins.digitalReadPin(DigitalPin.P13) == 0)\n                return true;\n            else\n                return false;\n        }\n        if (btn == GamepadButton.B2) {\n            pins.setPull(DigitalPin.P14, PinPullMode.PullUp)\n            if (pins.digitalReadPin(DigitalPin.P14) == 0)\n                return true;\n            else\n                return false;\n        } \n        if (btn == GamepadButton.B3) {\n            pins.setPull(DigitalPin.P15, PinPullMode.PullUp)\n            if (pins.digitalReadPin(DigitalPin.P15) == 0)\n                return true;\n            else\n                return false;\n        } \n        if (btn == GamepadButton.B4) {\n            pins.setPull(DigitalPin.P16, PinPullMode.PullUp)\n            if (pins.digitalReadPin(DigitalPin.P16) == 0)\n                return true;\n            else\n                return false;\n        }\n        return false;\n    }\n    /**\n        * Joystic est pressÃ©\n        */\n    //% block=\"bouton joystic est pressÃ©\"\n    export function joystic_is_pressed(): boolean {\n        pins.setPull(DigitalPin.P8, PinPullMode.PullUp)\n        if (pins.digitalReadPin(DigitalPin.P8) == 0)\n            return true;\n        else\n            return false;\n    }\n    /**\n     * Joystic\n     */\n    //% block=\"position de l'ax $ax du joystic\"\n    export function get_axis_value(ax :Gamepadaxis) : number {\n        let value = 0;\n        if (ax == Gamepadaxis.y)\n            value = pins.analogReadPin(AnalogReadWritePin.P1)\n        if (ax == Gamepadaxis.x)\n            value = pins.analogReadPin(AnalogReadWritePin.P2)\n        return (((value-512)*100)/512)*-1;\n    }\n\n    /**\n     * On button pressed\n     * @param btn Bouton de la manette\n     */\n    //% block=\"Lorsque $btn est pressÃ©\"\n    export function on_button_pressed(btn: GamepadButton, handler: () => void) {\n        control.inBackground(function() {\n            let prev = is_pressed(btn);\n            while (true) {\n                let val = is_pressed(btn);\n                if (!val && prev) {\n                    handler();\n                }\n                prev = val;\n                pause(20);\n            }\n        })\n    }\n\n    /**\n     * On joystic button pressed\n     */\n    //% block=\"Lorsque bouton joystic est pressÃ©\"\n    export function on_joystic_button_pressed(handler: () => void) {\n        control.inBackground(function () {\n            let prev = joystic_is_pressed();\n            while (true) {\n                let val = joystic_is_pressed();\n                if (!val && prev) {\n                    handler();\n                }\n                prev = val;\n                pause(20);\n            }\n        })\n    }\n    /**\n     * vibration gamepad\n     */\n    //% block= \"mettre vibration de la manette Ã  $vbt\"\n    export function vibrate_the_gampad (vbt: Gamepadvibration):void{\n       if (vbt=Gamepadvibration.on) \n            pins.digitalWritePin(DigitalPin.P0, 0)\n        if (vbt = Gamepadvibration.off)\n            pins.digitalWritePin(DigitalPin.P0, 1)\n    }\n}\n","pxt.json":"{\n    \"name\": \"manette joystic\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"manette_yahboom_joystic.ts\"\n    ],\n    \"targetVersions\": {\n        \"branch\": \"stable8.0\",\n        \"tag\": \"v8.0.17\",\n        \"commits\": \"https://github.com/microsoft/pxt-microbit/commits/9be832107a808812b98a75c4cd82bd7ff577193b\",\n        \"target\": \"8.0.17\",\n        \"pxt\": \"12.0.16\"\n    },\n    \"preferredEditor\": \"blocksprj\"\n}\n"}},{"timestamp":1760987705149,"editorVersion":"8.0.17","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"manette_on_button_pressed\" x=\"0\" y=\"0\"><field name=\"btn\">GamepadButton.B1</field><statement name=\"HANDLER\"><block type=\"basic_show_icon\"><field name=\"i\">IconNames.Yes</field><next><block type=\"device_set_digital_pin\"><value name=\"name\"><shadow type=\"digital_pin_shadow\"><field name=\"pin\">DigitalPin.P0</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\"><mutation min=\"0\" max=\"1\" label=\"Value\" precision=\"0\"></mutation><field name=\"SLIDER\">1</field></shadow></value></block></next></block></statement></block><block type=\"manette_on_button_pressed\" x=\"15\" y=\"246\"><field name=\"btn\">GamepadButton.B2</field><statement name=\"HANDLER\"><block type=\"basic_show_icon\"><field name=\"i\">IconNames.Yes</field><next><block type=\"device_set_digital_pin\"><value name=\"name\"><shadow type=\"digital_pin_shadow\"><field name=\"pin\">DigitalPin.P0</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\"><mutation min=\"0\" max=\"1\" label=\"Value\" precision=\"0\"></mutation><field name=\"SLIDER\">0</field></shadow></value></block></next></block></statement></block></xml>","main.ts":"manette.on_button_pressed(GamepadButton.B2, function () {\n    basic.showIcon(IconNames.Yes)\n    pins.digitalWritePin(DigitalPin.P0, 0)\n})\nmanette.on_button_pressed(GamepadButton.B1, function () {\n    basic.showIcon(IconNames.Yes)\n    pins.digitalWritePin(DigitalPin.P0, 1)\n})\n","README.md":"","manette_yahboom_joystic.ts":"\n/**\n* Utilisez ce fichier pour dÃ©finir des fonctions et des blocs personnalisÃ©s.\n* En savoir plus Ã  https://makecode.microbit.org/blocks/custom\n*/   \nenum GamepadButton {\n    //% block=\"B1\"\n    B1,\n    //% block=\"B2\"\n    B2,\n    //% block=\"B3\"\n    B3,\n    //% block=\"B4\"\n    B4\n}\n\nenum Gamepadaxis {\n    //% block=\"x\"\n    x,\n    //% block=\"y\"\n    y,\n}\nenum Gamepadvibration {\n    //% block=\"on\"\n    on,\n    //% block=\"off\"\n    off,\n}\n\n/**\n * Custom blocks\n */\n//% weight=105 color=#821071 icon=\"\\uf11b\"\nnamespace manette {\n\n    /**\n     * Est pressÃ©\n     * @param btn Bouton de la manette\n     */\n    //% block=\"bouton $btn est pressÃ©\"\n    export function is_pressed(btn: GamepadButton):boolean {\n        if (btn == GamepadButton.B1) {\n            pins.setPull(DigitalPin.P13, PinPullMode.PullUp)\n            if (pins.digitalReadPin(DigitalPin.P13) == 0)\n                return true;\n            else\n                return false;\n        }\n        if (btn == GamepadButton.B2) {\n            pins.setPull(DigitalPin.P14, PinPullMode.PullUp)\n            if (pins.digitalReadPin(DigitalPin.P14) == 0)\n                return true;\n            else\n                return false;\n        } \n        if (btn == GamepadButton.B3) {\n            pins.setPull(DigitalPin.P15, PinPullMode.PullUp)\n            if (pins.digitalReadPin(DigitalPin.P15) == 0)\n                return true;\n            else\n                return false;\n        } \n        if (btn == GamepadButton.B4) {\n            pins.setPull(DigitalPin.P16, PinPullMode.PullUp)\n            if (pins.digitalReadPin(DigitalPin.P16) == 0)\n                return true;\n            else\n                return false;\n        }\n        return false;\n    }\n    /**\n        * Joystic est pressÃ©\n        */\n    //% block=\"bouton joystic est pressÃ©\"\n    export function joystic_is_pressed(): boolean {\n        pins.setPull(DigitalPin.P8, PinPullMode.PullUp)\n        if (pins.digitalReadPin(DigitalPin.P8) == 0)\n            return true;\n        else\n            return false;\n    }\n    /**\n     * Joystic\n     */\n    //% block=\"position de l'ax $ax du joystic\"\n    export function get_axis_value(ax :Gamepadaxis) : number {\n        let value = 0;\n        if (ax == Gamepadaxis.y)\n            value = pins.analogReadPin(AnalogReadWritePin.P1)\n        if (ax == Gamepadaxis.x)\n            value = pins.analogReadPin(AnalogReadWritePin.P2)\n        return (((value-512)*100)/512)*-1;\n    }\n\n    /**\n     * On button pressed\n     * @param btn Bouton de la manette\n     */\n    //% block=\"Lorsque $btn est pressÃ©\"\n    export function on_button_pressed(btn: GamepadButton, handler: () => void) {\n        control.inBackground(function() {\n            let prev = is_pressed(btn);\n            while (true) {\n                let val = is_pressed(btn);\n                if (!val && prev) {\n                    handler();\n                }\n                prev = val;\n                pause(20);\n            }\n        })\n    }\n\n    /**\n     * On joystic button pressed\n     */\n    //% block=\"Lorsque bouton joystic est pressÃ©\"\n    export function on_joystic_button_pressed(handler: () => void) {\n        control.inBackground(function () {\n            let prev = joystic_is_pressed();\n            while (true) {\n                let val = joystic_is_pressed();\n                if (!val && prev) {\n                    handler();\n                }\n                prev = val;\n                pause(20);\n            }\n        })\n    }\n    /**\n     * vibration gamepad\n     */\n    //% block= \"mettre vibration de la manette Ã  $vbt\"\n    export function vibrate_the_gampad (vbt: Gamepadvibration):void{\n       if (vbt=Gamepadvibration.on) \n            pins.digitalWritePin(DigitalPin.P0, 0)\n        if (vbt = Gamepadvibration.off)\n            pins.digitalWritePin(DigitalPin.P0, 1)\n    }\n}\n","pxt.json":"{\n    \"name\": \"manette joystic\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"manette_yahboom_joystic.ts\"\n    ],\n    \"targetVersions\": {\n        \"branch\": \"stable8.0\",\n        \"tag\": \"v8.0.17\",\n        \"commits\": \"https://github.com/microsoft/pxt-microbit/commits/9be832107a808812b98a75c4cd82bd7ff577193b\",\n        \"target\": \"8.0.17\",\n        \"pxt\": \"12.0.16\"\n    },\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1760989626782,"editorVersion":"8.0.17","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_button_event\" x=\"589\" y=\"39\"><field name=\"NAME\">Button.A</field><statement name=\"HANDLER\"><block type=\"manette_vibrate_the_gamepad\"><field name=\"vbt\">Gamepadvibration.on</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">100</field></shadow></value><next><block type=\"manette_vibrate_the_gamepad\"><field name=\"vbt\">Gamepadvibration.off</field></block></next></block></next></block></statement></block><block type=\"device_button_event\" x=\"593\" y=\"269\"><field name=\"NAME\">Button.B</field><statement name=\"HANDLER\"><block type=\"manette_vibrate_the_gamepad\"><field name=\"vbt\">Gamepadvibration.on</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"manette_vibrate_the_gamepad\"><field name=\"vbt\">Gamepadvibration.off</field></block></next></block></next></block></statement></block></xml>","main.ts":"input.onButtonPressed(Button.A, function () {\n    manette.vibrate_the_gamepad(Gamepadvibration.on)\n    basic.pause(100)\n    manette.vibrate_the_gamepad(Gamepadvibration.off)\n})\ninput.onButtonPressed(Button.B, function () {\n    manette.vibrate_the_gamepad(Gamepadvibration.on)\n    basic.pause(2000)\n    manette.vibrate_the_gamepad(Gamepadvibration.off)\n})\n","README.md":"","manette_yahboom_joystic.ts":"\n/**\n* Utilisez ce fichier pour dÃ©finir des fonctions et des blocs personnalisÃ©s.\n* En savoir plus Ã  https://makecode.microbit.org/blocks/custom\n*/   \nenum GamepadButton {\n    //% block=\"B1\"\n    B1,\n    //% block=\"B2\"\n    B2,\n    //% block=\"B3\"\n    B3,\n    //% block=\"B4\"\n    B4\n}\nenum Gamepadvibrationtime {\n    //% block=\"cour\"\n    cour,\n    //% block=\"moyen\"\n    moyen,\n    //% block=\"long\"\n    long,\n}\nenum Gamepadaxis {\n    //% block=\"x\"\n    x,\n    //% block=\"y\"\n    y,\n}\nenum Gamepadvibration {\n    //% block=\"on\"\n    on,\n    //% block=\"off\"\n    off,\n}\n\n/**\n * Custom blocks\n */\n//% weight=105 color=#821071 icon=\"\\uf11b\"\nnamespace manette {\n\n    /**\n     * Est pressÃ©\n     * @param btn Bouton de la manette\n     */\n    //% block=\"bouton $btn est pressÃ©\"\n    export function is_pressed(btn: GamepadButton):boolean {\n        if (btn == GamepadButton.B1) {\n            pins.setPull(DigitalPin.P13, PinPullMode.PullUp)\n            if (pins.digitalReadPin(DigitalPin.P13) == 0)\n                return true;\n            else\n                return false;\n        }\n        if (btn == GamepadButton.B2) {\n            pins.setPull(DigitalPin.P14, PinPullMode.PullUp)\n            if (pins.digitalReadPin(DigitalPin.P14) == 0)\n                return true;\n            else\n                return false;\n        } \n        if (btn == GamepadButton.B3) {\n            pins.setPull(DigitalPin.P15, PinPullMode.PullUp)\n            if (pins.digitalReadPin(DigitalPin.P15) == 0)\n                return true;\n            else\n                return false;\n        } \n        if (btn == GamepadButton.B4) {\n            pins.setPull(DigitalPin.P16, PinPullMode.PullUp)\n            if (pins.digitalReadPin(DigitalPin.P16) == 0)\n                return true;\n            else\n                return false;\n        }\n        return false;\n    }\n    /**\n        * Joystic est pressÃ©\n        */\n    //% block=\"bouton joystic est pressÃ©\"\n    export function joystic_is_pressed(): boolean {\n        pins.setPull(DigitalPin.P8, PinPullMode.PullUp)\n        if (pins.digitalReadPin(DigitalPin.P8) == 0)\n            return true;\n        else\n            return false;\n    }\n    /**\n     * Joystic\n     */\n    //% block=\"position de l'ax $ax du joystic\"\n    export function get_axis_value(ax :Gamepadaxis) : number {\n        let value = 0;\n        if (ax == Gamepadaxis.y)\n            value = pins.analogReadPin(AnalogReadWritePin.P1)\n        if (ax == Gamepadaxis.x)\n            value = pins.analogReadPin(AnalogReadWritePin.P2)\n        return (((value-512)*100)/512)*-1;\n    }\n\n    /**\n     * On button pressed\n     * @param btn Bouton de la manette\n     */\n    //% block=\"Lorsque $btn est pressÃ©\"\n    export function on_button_pressed(btn: GamepadButton, handler: () => void) {\n        control.inBackground(function() {\n            let prev = is_pressed(btn);\n            while (true) {\n                let val = is_pressed(btn);\n                if (!val && prev) {\n                    handler();\n                }\n                prev = val;\n                pause(20);\n            }\n        })\n    }\n\n    /**\n     * On joystic button pressed\n     */\n    //% block=\"Lorsque bouton joystic est pressÃ©\"\n    export function on_joystic_button_pressed(handler: () => void) {\n        control.inBackground(function () {\n            let prev = joystic_is_pressed();\n            while (true) {\n                let val = joystic_is_pressed();\n                if (!val && prev) {\n                    handler();\n                }\n                prev = val;\n                pause(20);\n            }\n        })\n    }\n    /**\n     * vibration gamepad\n     */\n    //% block=\"mettre vibration de la manette Ã  $vbt\"\n    export function vibrate_the_gamepad (vbt: Gamepadvibration):void{\n       if (vbt == Gamepadvibration.on) \n            pins.digitalWritePin(DigitalPin.P0, 0)\n        if (vbt == Gamepadvibration.off)\n            pins.digitalWritePin(DigitalPin.P0, 1)\n    }\n    /**\n     * vibration gamepad\n     */\n    //% block=\"mettre vibration pendant $vbtt\"\n    export function vibrate_the_gamepad_time(Gamepadvibrationtime:vbtt): void {\n        if (Gamepadvibrationtime==cour)\n            manette.vibrate_the_gamepad(Gamepadvibration.on)\n            basic.pause(100)\n            manette.vibrate_the_gamepad(Gamepadvibration.off)\n        if (Gamepadvibrationtime==moyen)\n            manette.vibrate_the_gamepad(Gamepadvibration.on)\n            basic.pause(500)\n            manette.vibrate_the_gamepad(Gamepadvibration.off)\n        if (Gamepadvibrationtime==long)\n            manette.vibrate_the_gamepad(Gamepadvibration.on)\n            basic.pause(1500)\n            manette.vibrate_the_gamepad(Gamepadvibration.off)\n    }\n}\n","pxt.json":"{\n    \"name\": \"manette joystic\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"manette_yahboom_joystic.ts\"\n    ],\n    \"targetVersions\": {\n        \"branch\": \"stable8.0\",\n        \"tag\": \"v8.0.17\",\n        \"commits\": \"https://github.com/microsoft/pxt-microbit/commits/9be832107a808812b98a75c4cd82bd7ff577193b\",\n        \"target\": \"8.0.17\",\n        \"pxt\": \"12.0.16\"\n    },\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1761040347042,"editorVersion":"8.0.17","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_button_event\" x=\"41\" y=\"54\"><field name=\"NAME\">Button.A</field><statement name=\"HANDLER\"><block type=\"manette_vibrate_the_gamepad\"><field name=\"vbt\">Gamepadvibration.on</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">100</field></shadow></value><next><block type=\"manette_vibrate_the_gamepad\"><field name=\"vbt\">Gamepadvibration.off</field></block></next></block></next></block></statement></block><block type=\"manette_vibrate_the_gamepad_time\" disabled-reasons=\"pxt_automatic_disabled\" x=\"539\" y=\"134\"><field name=\"vbtt\">Gamepadvibrationtime.long</field></block><block type=\"device_button_event\" x=\"4\" y=\"230\"><field name=\"NAME\">Button.B</field><statement name=\"HANDLER\"><block type=\"manette_vibrate_the_gamepad\"><field name=\"vbt\">Gamepadvibration.on</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"manette_vibrate_the_gamepad\"><field name=\"vbt\">Gamepadvibration.off</field></block></next></block></next></block></statement></block></xml>","main.ts":"","README.md":"","manette_yahboom_joystic.ts":"\n/**\n* Utilisez ce fichier pour dÃ©finir des fonctions et des blocs personnalisÃ©s.\n* En savoir plus Ã  https://makecode.microbit.org/blocks/custom\n*/   \nenum GamepadButton {\n    //% block=\"B1\"\n    B1,\n    //% block=\"B2\"\n    B2,\n    //% block=\"B3\"\n    B3,\n    //% block=\"B4\"\n    B4\n}\nenum Gamepadvibrationtime {\n    //% block=\"court\"\n    court,\n    //% block=\"moyen\"\n    moyen,\n    //% block=\"long\"\n    long,\n}\nenum Gamepadaxis {\n    //% block=\"x\"\n    x,\n    //% block=\"y\"\n    y,\n}\nenum Gamepadvibration {\n    //% block=\"on\"\n    on,\n    //% block=\"off\"\n    off,\n}\n\n/**\n * Custom blocks\n */\n//% weight=105 color=#821071 icon=\"\\uf11b\"\nnamespace manette {\n\n    /**\n     * Est pressÃ©\n     * @param btn Bouton de la manette\n     */\n    //% block=\"bouton $btn est pressÃ©\"\n    export function is_pressed(btn: GamepadButton):boolean {\n        if (btn == GamepadButton.B1) {\n            pins.setPull(DigitalPin.P13, PinPullMode.PullUp)\n            if (pins.digitalReadPin(DigitalPin.P13) == 0)\n                return true;\n            else\n                return false;\n        }\n        if (btn == GamepadButton.B2) {\n            pins.setPull(DigitalPin.P14, PinPullMode.PullUp)\n            if (pins.digitalReadPin(DigitalPin.P14) == 0)\n                return true;\n            else\n                return false;\n        } \n        if (btn == GamepadButton.B3) {\n            pins.setPull(DigitalPin.P15, PinPullMode.PullUp)\n            if (pins.digitalReadPin(DigitalPin.P15) == 0)\n                return true;\n            else\n                return false;\n        } \n        if (btn == GamepadButton.B4) {\n            pins.setPull(DigitalPin.P16, PinPullMode.PullUp)\n            if (pins.digitalReadPin(DigitalPin.P16) == 0)\n                return true;\n            else\n                return false;\n        }\n        return false;\n    }\n    /**\n        * Joystic est pressÃ©\n        */\n    //% block=\"bouton joystic est pressÃ©\"\n    export function joystic_is_pressed(): boolean {\n        pins.setPull(DigitalPin.P8, PinPullMode.PullUp)\n        if (pins.digitalReadPin(DigitalPin.P8) == 0)\n            return true;\n        else\n            return false;\n    }\n    /**\n     * Joystic\n     */\n    //% block=\"position de l'ax $ax du joystic\"\n    export function get_axis_value(ax :Gamepadaxis) : number {\n        let value = 0;\n        if (ax == Gamepadaxis.y)\n            value = pins.analogReadPin(AnalogReadWritePin.P1)\n        if (ax == Gamepadaxis.x)\n            value = pins.analogReadPin(AnalogReadWritePin.P2)\n        return (((value-512)*100)/512)*-1;\n    }\n\n    /**\n     * On button pressed\n     * @param btn Bouton de la manette\n     */\n    //% block=\"Lorsque $btn est pressÃ©\"\n    export function on_button_pressed(btn: GamepadButton, handler: () => void) {\n        control.inBackground(function() {\n            let prev = is_pressed(btn);\n            while (true) {\n                let val = is_pressed(btn);\n                if (!val && prev) {\n                    handler();\n                }\n                prev = val;\n                pause(20);\n            }\n        })\n    }\n\n    /**\n     * On joystic button pressed\n     */\n    //% block=\"Lorsque bouton joystic est pressÃ©\"\n    export function on_joystic_button_pressed(handler: () => void) {\n        control.inBackground(function () {\n            let prev = joystic_is_pressed();\n            while (true) {\n                let val = joystic_is_pressed();\n                if (!val && prev) {\n                    handler();\n                }\n                prev = val;\n                pause(20);\n            }\n        })\n    }\n    /**\n     * vibration gamepad\n     */\n    //% block=\"mettre vibration de la manette Ã  $vbt\"\n    export function vibrate_the_gamepad (vbt: Gamepadvibration):void{\n       if (vbt == Gamepadvibration.on) \n            pins.digitalWritePin(DigitalPin.P0, 0)\n        if (vbt == Gamepadvibration.off)\n            pins.digitalWritePin(DigitalPin.P0, 1)\n    }\n    /**\n     * vibration gamepad\n     */\n    //% block=\"mettre vibration pendant un temps $vbtt\"\n    export function vibrate_the_gamepad_time(vbtt:Gamepadvibrationtime): void {\n        if (vbtt == Gamepadvibrationtime.court) {\n            manette.vibrate_the_gamepad(Gamepadvibration.on)\n            basic.pause(100)\n            manette.vibrate_the_gamepad(Gamepadvibration.off)\n        }\n        if (vbtt == Gamepadvibrationtime.moyen) {\n            manette.vibrate_the_gamepad(Gamepadvibration.on)\n            basic.pause(500)\n            manette.vibrate_the_gamepad(Gamepadvibration.off)\n        }\n        if (vbtt == Gamepadvibrationtime.long) {\n            manette.vibrate_the_gamepad(Gamepadvibration.on)\n            basic.pause(1500)\n            manette.vibrate_the_gamepad(Gamepadvibration.off)\n        }\n    }  \n}","pxt.json":"{\n    \"name\": \"manette joystic\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"manette_yahboom_joystic.ts\"\n    ],\n    \"targetVersions\": {\n        \"branch\": \"stable8.0\",\n        \"tag\": \"v8.0.17\",\n        \"commits\": \"https://github.com/microsoft/pxt-microbit/commits/9be832107a808812b98a75c4cd82bd7ff577193b\",\n        \"target\": \"8.0.17\",\n        \"pxt\": \"12.0.16\"\n    },\n    \"preferredEditor\": \"blocksprj\"\n}\n"}},{"timestamp":1761043780676,"editorVersion":"8.0.17","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_button_event\" x=\"41\" y=\"54\"><field name=\"NAME\">Button.A</field><statement name=\"HANDLER\"><block type=\"manette_vibrate_the_gamepad\"><field name=\"vbt\">Gamepadvibration.on</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">100</field></shadow></value><next><block type=\"manette_vibrate_the_gamepad\"><field name=\"vbt\">Gamepadvibration.off</field></block></next></block></next></block></statement></block><block type=\"device_button_event\" x=\"4\" y=\"230\"><field name=\"NAME\">Button.B</field><statement name=\"HANDLER\"><block type=\"manette_vibrate_the_gamepad\"><field name=\"vbt\">Gamepadvibration.on</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"manette_vibrate_the_gamepad\"><field name=\"vbt\">Gamepadvibration.off</field><next><block type=\"manette_vibrate_the_gamepad_time\"><field name=\"vbtt\">Gamepadvibrationtime.long</field></block></next></block></next></block></next></block></statement></block></xml>","main.ts":"","README.md":"","manette_yahboom_joystic.ts":"\n/**\n* Utilisez ce fichier pour dÃ©finir des fonctions et des blocs personnalisÃ©s.\n* En savoir plus Ã  https://makecode.microbit.org/blocks/custom\n*/   \nenum GamepadButton {\n    //% block=\"B1\"\n    B1,\n    //% block=\"B2\"\n    B2,\n    //% block=\"B3\"\n    B3,\n    //% block=\"B4\"\n    B4\n}\nenum Gamepadvibrationtime {\n    //% block=\"court\"\n    court,\n    //% block=\"moyen\"\n    moyen,\n    //% block=\"long\"\n    long,\n}\nenum Gamepadaxis {\n    //% block=\"x\"\n    x,\n    //% block=\"y\"\n    y,\n}\nenum Gamepadvibration {\n    //% block=\"on\"\n    on,\n    //% block=\"off\"\n    off,\n}\n\n/**\n * Custom blocks\n */\n//% weight=105 color=#821071 icon=\"\\uf11b\"\nnamespace manette {\n\n    /**\n     * Est pressÃ©\n     * @param btn Bouton de la manette\n     */\n    //% block=\"bouton $btn est pressÃ©\"\n    export function is_pressed(btn: GamepadButton):boolean {\n        if (btn == GamepadButton.B1) {\n            pins.setPull(DigitalPin.P13, PinPullMode.PullUp)\n            if (pins.digitalReadPin(DigitalPin.P13) == 0)\n                return true;\n            else\n                return false;\n        }\n        if (btn == GamepadButton.B2) {\n            pins.setPull(DigitalPin.P14, PinPullMode.PullUp)\n            if (pins.digitalReadPin(DigitalPin.P14) == 0)\n                return true;\n            else\n                return false;\n        } \n        if (btn == GamepadButton.B3) {\n            pins.setPull(DigitalPin.P15, PinPullMode.PullUp)\n            if (pins.digitalReadPin(DigitalPin.P15) == 0)\n                return true;\n            else\n                return false;\n        } \n        if (btn == GamepadButton.B4) {\n            pins.setPull(DigitalPin.P16, PinPullMode.PullUp)\n            if (pins.digitalReadPin(DigitalPin.P16) == 0)\n                return true;\n            else\n                return false;\n        }\n        return false;\n    }\n    /**\n        * Joystic est pressÃ©\n        */\n    //% block=\"bouton joystic est pressÃ©\"\n    export function joystic_is_pressed(): boolean {\n        pins.setPull(DigitalPin.P8, PinPullMode.PullUp)\n        if (pins.digitalReadPin(DigitalPin.P8) == 0)\n            return true;\n        else\n            return false;\n    }\n    /**\n     * Joystic\n     */\n    //% block=\"position de l'ax $ax du joystic\"\n    export function get_axis_value(ax :Gamepadaxis) : number {\n        let value = 0;\n        if (ax == Gamepadaxis.y)\n            value = pins.analogReadPin(AnalogReadWritePin.P1)\n        if (ax == Gamepadaxis.x)\n            value = pins.analogReadPin(AnalogReadWritePin.P2)\n        return (((value-512)*100)/512)*-1;\n    }\n\n    /**\n     * On button pressed\n     * @param btn Bouton de la manette\n     */\n    //% block=\"Lorsque $btn est pressÃ©\"\n    export function on_button_pressed(btn: GamepadButton, handler: () => void) {\n        control.inBackground(function() {\n            let prev = is_pressed(btn);\n            while (true) {\n                let val = is_pressed(btn);\n                if (!val && prev) {\n                    handler();\n                }\n                prev = val;\n                pause(20);\n            }\n        })\n    }\n\n    /**\n     * On joystic button pressed\n     */\n    //% block=\"Lorsque bouton joystic est pressÃ©\"\n    export function on_joystic_button_pressed(handler: () => void) {\n        control.inBackground(function () {\n            let prev = joystic_is_pressed();\n            while (true) {\n                let val = joystic_is_pressed();\n                if (!val && prev) {\n                    handler();\n                }\n                prev = val;\n                pause(20);\n            }\n        })\n    }\n    /**\n     * vibration gamepad\n     */\n    //% block=\"mettre vibration de la manette Ã  $vbt\"\n    export function vibrate_the_gamepad (vbt: Gamepadvibration):void{\n       if (vbt == Gamepadvibration.on) \n            pins.digitalWritePin(DigitalPin.P0, 0)\n        if (vbt == Gamepadvibration.off)\n            pins.digitalWritePin(DigitalPin.P0, 1)\n    }\n    /**\n     * vibration gamepad\n     */\n    //% block=\"mettre vibration pendant un temps $vbtt\"\n    export function vibrate_the_gamepad_time(vbtt:Gamepadvibrationtime): void {\n        if (vbtt == Gamepadvibrationtime.court) {\n            manette.vibrate_the_gamepad(Gamepadvibration.on)\n            basic.pause(100)\n            manette.vibrate_the_gamepad(Gamepadvibration.off)\n        }\n        if (vbtt == Gamepadvibrationtime.moyen) {\n            manette.vibrate_the_gamepad(Gamepadvibration.on)\n            basic.pause(500)\n            manette.vibrate_the_gamepad(Gamepadvibration.off)\n        }\n        if (vbtt == Gamepadvibrationtime.long) {\n            manette.vibrate_the_gamepad(Gamepadvibration.on)\n            basic.pause(1500)\n            manette.vibrate_the_gamepad(Gamepadvibration.off)\n        }\n    }  \n}","pxt.json":"{\n    \"name\": \"manette joystic\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"manette_yahboom_joystic.ts\"\n    ],\n    \"targetVersions\": {\n        \"branch\": \"stable8.0\",\n        \"tag\": \"v8.0.17\",\n        \"commits\": \"https://github.com/microsoft/pxt-microbit/commits/9be832107a808812b98a75c4cd82bd7ff577193b\",\n        \"target\": \"8.0.17\",\n        \"pxt\": \"12.0.16\"\n    },\n    \"preferredEditor\": \"blocksprj\"\n}\n"}}],"shares":[],"lastSaveTime":1761043892027}